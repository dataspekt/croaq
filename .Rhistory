list.stations()
croaq:::stations
q()
n
q()
n
datatypes
datatypes$cycle[datatypes$code == 0]
type = 0
cycle
data <- croaq(155,c("so2","no2"),from="2018-01-01", to = "2018-12-31",type=0)
data
range(data$time)
data$time
range(data$time)
?range.POSIXct
str(data)
as.POSIXct
?as.POSIXct
head(data)
data
head(data)
head(data)
data
min(data$time)
data$time
data
?as.POSIXct
q()
n
q()
n
q()
n
croaq:::stations
q()
n
rm(stations)
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
?use_data
?as.POSIXct
as.POSIXct("2018-01-01")
class(as.POSIXct("2018-01-01"))
class(format(as.POSIXct("2018-01-01")))
?format.POSIXct
wide(data)
with(wide(data), plot(pm10,time))
with(wide(data), plot(time,pm10))
with(wide(data), plot(time,pm10), type="l")
with(wide(data), plot(time,pm10), type="l")
with(wide(data), plot(time,pm10, type="l"))
with(wide(data), plot(time,pm10, type="p"))
with(wide(data), plot(time,pm10, type="l"))
head(data)
head(wide(data))
?reahape
?reshape
unclass(data)
as.data.frame(data)
class(data)
with(wide(data), plot(time,so2, type="l"))
with(wide(data), plot(time,no2, type="l"))
with(wide(data), plot(time,co, type="l"))
q()
n
?setClass
i
js
?jsonlite::fromJSON
class(time.range)
js
nrow(js)
x
lapply(list(x), as, "data.frame")
lapply(list(x), as, "data.frame")
?as
?switch
as.character(is.data.frame(js))
ic <- x
x
ic <- x
ic
ic <- c(1,2,666)
ic
ic
icname <- sapply(ic, function(x){
        lb <- pollutants$label[pollutants$code == x]
        if(length(lb) == 0) lb <- paste0("item", x)
        return(lb)
    })
icname
ic <- switch(
        class(item),
        character = char2ic(item),
        numeric = num2ic(item),
        integer = num2ic(item),
        stop("Argument 'item' should be numeric, integer or character.")
    )
item <- x
x
item <- c("co","bb")
item
ic <- switch(
        class(item),
        character = char2ic(item),
        numeric = num2ic(item),
        integer = num2ic(item),
        stop("Argument 'item' should be numeric, integer or character.")
    )
ic <- switch(
        class(item),
        character = char2ic(item),
        numeric = num2ic(item),
        integer = num2ic(item),
        stop("Argument 'item' should be numeric, integer or character.")
    )
char2ic <- function(i){
    ic <- sapply(i, function(x)
    {
        code <- pollutants$code[is.element(pollutants$label,x)]
        if(length(code)==0) code <- NA
        return(code)
    })
    return(ic)
}
   ic <- switch(
        class(item),
        character = char2ic(item),
        numeric = num2ic(item),
        integer = num2ic(item),
        stop("Argument 'item' should be numeric, integer or character.")
    )
ic
i
x <- c(1,2,666)
item <- c(1,2,666)
    ic <- switch(
        class(item),
        character = char2ic(item),
        numeric = num2ic(item),
        integer = num2ic(item),
        stop("Argument 'item' should be numeric, integer or character.")
    )
num2ic <- function(i){
    names(i) <- sapply(i, function(x){
        lb <- pollutants$label[pollutants$code == x]
        if(length(lb) == 0) lb <- paste0("item", x)
        return(lb)
    })
    return(i)
}

    ic <- switch(
)
    ic <- switch(
        class(item),
        character = char2ic(item),
        numeric = num2ic(item),
        integer = num2ic(item),
        stop("Argument 'item' should be numeric, integer or character.")
    )
ic
num2ic(item)
666 %in% pollutants$code
num2ic <- function(i){
    names(i) <- sapply(i, function(x){
        lb <- pollutants$label[pollutants$code == x]
        if(length(lb) == 0) lb <- paste0("item", x)
        return(lb)
    })
    i <- ifelse(i %in% pollutants$code, i, NA)
    return(i)
}
num2ic(item)
char2ic <- function(i){
    ic <- sapply(i, function(x)
    {
        code <- pollutants$code[is.element(pollutants$label,x)]
        if(length(code)==0) code <- NA
        return(code)
    })
    return(ic)
}
num2ic <- function(i){
    ic <- ifelse(i %in% pollutants$code, i, NA)
    if(any(is.na(ic)))
        stop(paste("Item code(s) ", paste(item[is.na(ic)], collapse=", "), "not in database." ))
    names(ic) <- sapply(ic, function(x){
        lb <- pollutants$label[pollutants$code == x]
        if(length(lb) == 0) lb <- paste0("item", x)
        return(lb)
    })
    return(ic)
}

num2ic(c(1,2,666))

char2ic <- function(i){
    ic <- sapply(i, function(x)
    {
        code <- pollutants$code[is.element(pollutants$label,x)]
        if(length(code)==0) code <- NA
        return(code)
    })
    return(ic)
}
num2ic <- function(i){
    ic <- ifelse(i %in% pollutants$code, i, NA)
    names(ic) <- sapply(ic, function(x){
        lb <- pollutants$label[pollutants$code == x]
        if(length(lb) == 0) lb <- paste0("item", x)
        return(lb)
    })
    return(ic)
}

num2ic(c(1,2,666))
num2ic(c(1,2,666))
i <- c(1,2,666)
ic <- ifelse(i %in% pollutants$code, i, NA)
ic
names(ic) <- sapply(ic, function(x){
        lb <- pollutants$label[pollutants$code == x]
        if(length(lb) == 0) lb <- paste0("item", x)
        return(lb)
    })
ic
num2ic <- function(i){
    ic <- i
    names(ic) <- sapply(ic, function(x){
        lb <- pollutants$label[pollutants$code == x]
        if(length(lb) == 0) lb <- paste0("item", x)
        return(lb)
    })
    ic <- ifelse(ic %in% pollutants$code, ic, NA)
    return(ic)
}
num2ic(c(1,2,666))
num2ic <- function(i){
    ic <- i
    icname <- sapply(ic, function(x){
        lb <- pollutants$label[pollutants$code == x]
        if(length(lb) == 0) lb <- paste0("item", x)
        return(lb)
    })
    ic <- ifelse(ic %in% pollutants$code, ic, NA)
    names(ic) <- icname
    return(ic)
}
num2ic(c(1,2,666))
data
dim(data)
str(data)
as.data.frame(data)
class(as.data.frame(data))
fill.time.range(data)
fill.time.range(data,type=0)
time.range
from = "2019-05-01"
to = "2019-05-01"
as.POSIXct(time.range(c(from,to)))
as.POSIXct(c(from,to))
time.range <- as.POSIXct(c(from,to))
fill.time.range(data,time,range,type=0)
fill.time.range(data,time.range,type=0)
type
cycle <- switch(datatypes$cycle[datatypes$code == type],
                    hourly = "hour",
                    daily = "day",
                    yearly = "year"
                    )
cycle
split(data, data$item)
data$item
data
fill.time.range(data, time.range,type=0)
nrow(data)
data$item
str(data)
char2ic(c("co","so2"))
q()
n
q()
n
data
data
data
load_all()
load_all()
time.range <- as.POSIXct(c(from = "2018-01-01", to = "2018-01-01"))
time.range
seq(time.range[1], time.range[2], by = cycle)
seq(time.range[1], time.range[2], by = "hour")
seq.POSIXct(time.range[1], time.range[2], by = "hour")
seq.POSIXt(time.range[1], time.range[2], by = "hour")
?seq.POSIXt
seq.POSIXt(time.range[1], time.range[2], by = "hour")
time.range[1]
time.range[2]
data
load_all()
as.POSIXct("2018-01-01")
as.POSIXct("2018-01-01")+1
as.POSIXct("2018-01-01")+3600
as.POSIXct("2018-01-01")+36000
60*24
60*24*60
as.POSIXct("2018-01-01")+(60*24*60)
q()
n
?usethis::use_data
ls()
listPollutants()
?warning
?croaq
?croaq
?croaq
?croaq
?setAs
?croaq
?croaq-data
?croaq
package?croaq
help(package="croaq")
?croaq
?croaq
class(unclass(data))
data.frame(unclass(data))
str(data.frame(unclass(data)))
q()
n
as(datr,"data.frame")
datr
datv
data$unit
bquote("Razina "*PM[10]*" unique(data$unit)")
bquote("Razina "*PM[10]*" unique(data$unit)")
demo(plotmath)
?bquote
min(data$time)
?strftime
data
data
q()
n
q()
n
?reshape
?reshape
n2mfrow(4)
n2mfrow(9)
?plot
?heatmap
example(heatmap)
example(heatmap)
mat
df
example(heatmap)
q()
n
p
p
hist(df$value)
library(viridis)
?heatmap
heatmap(t(mat), Rowv = NA, Colv = NA, col=c("black","white"), scale="none")
example(image)
?image
head(df)
?heatmap
?abline
?abline
head(data)
?mtext
load_all()
plot(data)
load_all()
plot(data)
load_all()
plot(data)
load_all()
plot(data)
?mtext
load_all()
plot(data)
load_all()
plot(data)
load_all()
plot(data)
load_all()
plot(data)
load_all()
plot(data)
load_all()
plot(data)
load_all()
plot(data)
load_all()
plot(data)
plot(data)
?croaq-data-class
?croaq-data-class
?croaq
?jsonlite::fromJSON
?reshape
?setClass
q()
n
q()
n
q()
n
?croaqData-class
?croaqData-class
?croaqData-class
?croaqData-class
?croaqData-class
?croaqData-class
?S3Part
?setOldClass
library("methods")
.OldClassesList
q()
n
?summary
?croaq
?croaq
?croaq
?as.data.frame
as.data.frame
q()
n
?croaq
plot
data
?plot.lm
?plot.hclust
plot.hclust
methods(plot.hclust)
?summary
package?croaq
?croaq-package
q()
n
listStations()
?croaq-package
?croaq
q()
n
head(data)
?fill.time.range
as.POSIXct("20098-734-92")
as.POSIXct("2009-734-92")
as.POSIXct("2017-12-010")
as.POSIXct("2017-12-0100")
as.POSIXct("2017-12-010101")
as.POSIXct("2017-12-0101019987")
as.POSIXct("2017-120101019987")
as.POSIXct("2017-12-9901019987")
as.POSIXct("2017-12-01019987")
strptime("2017-12-01")
strptime("2017-12-01", format = "%y-%m-%d")
strptime("2017-12-01", format = "%Y-%m-%d")
class(strptime("2017-12-01", format = "%Y-%m-%d"))
from <- "2017-12-01"
to <- "2017-12-02"
tr
tr <- strptime(c(from = from, to = to), format = "%Y-%m-%d")
tr
if(tr["from"] > tr["to"]) stop("Start date must be <= end date.")
tr
tr$from
tr[1]
tr[["from"]]
tr["from"]
str(tr)
as.POSIXct(tr)
tr <- strptime(c(from = from, to = to), format = "%Y-%m-%d")
to <- "2017-13-02"
tr <- strptime(c(from = from, to = to), format = "%Y-%m-%d")
tr
?croaq
?croaq
data
data
listDatatypes()
plot(data, cex=.5, type="b")
q()
n
